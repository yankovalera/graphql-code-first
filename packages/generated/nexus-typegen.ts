/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as db from "./../shared-db/index"
import type { Context } from "./../api-nexus/src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BuyProductInput: { // input type
    count: number | null; // Int
    productId: string; // ID!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Cart: db.Cart;
  CartProduct: db.CartProduct;
  Mutation: {};
  Product: db.Product;
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Cart: { // field return type
    id: number | null; // Int
    items: Array<NexusGenRootTypes['CartProduct'] | null>; // [CartProduct]!
  }
  CartProduct: { // field return type
    count: number | null; // Int
    product: NexusGenRootTypes['Product'] | null; // Product
  }
  Mutation: { // field return type
    buyProduct: NexusGenRootTypes['Cart']; // Cart!
  }
  Product: { // field return type
    id: string | null; // ID
    inStock: boolean | null; // Boolean
    price: number | null; // Int
    title: string | null; // String
  }
  Query: { // field return type
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
  }
}

export interface NexusGenFieldTypeNames {
  Cart: { // field return type name
    id: 'Int'
    items: 'CartProduct'
  }
  CartProduct: { // field return type name
    count: 'Int'
    product: 'Product'
  }
  Mutation: { // field return type name
    buyProduct: 'Cart'
  }
  Product: { // field return type name
    id: 'ID'
    inStock: 'Boolean'
    price: 'Int'
    title: 'String'
  }
  Query: { // field return type name
    products: 'Product'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    buyProduct: { // args
      input: NexusGenInputs['BuyProductInput']; // BuyProductInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}